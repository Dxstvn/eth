name: Enhanced Agent Coordination System

on:
  push:
    branches: [main, develop]
  pull_request:
    types: [opened, synchronize, closed, ready_for_review]
  workflow_dispatch:
    inputs:
      agent_task:
        description: 'Specific task for agents'
        required: false
        type: choice
        options:
          - 'Run comprehensive tests'
          - 'Security audit'
          - 'Backend integration check'
          - 'Performance analysis'
      target_agent:
        description: 'Target specific agent'
        required: false
        type: choice
        options:
          - 'all'
          - 'frontend-engineer'
          - 'backend-engineer'
          - 'testing-expert'
          - 'security-auditor'
  issues:
    types: [opened, labeled, closed]
  schedule:
    - cron: '0 */6 * * *'  # Run every 6 hours for monitoring

env:
  FRONTEND_PATH: '.'
  BACKEND_REPO: 'personal-cryptoscrow-backend'
  AGENT_LABELS: 'agent-task,frontend,backend,testing,security'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend_changed: ${{ steps.changes.outputs.frontend }}
      backend_integration_changed: ${{ steps.changes.outputs.backend_integration }}
      security_sensitive: ${{ steps.changes.outputs.security }}
      testing_required: ${{ steps.changes.outputs.testing }}
      affected_files: ${{ steps.analyze.outputs.files }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Detect file changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            frontend:
              - 'app/**'
              - 'components/**'
              - 'public/**'
              - 'styles/**'
              - 'package.json'
              - 'tsconfig.json'
              - 'next.config.js'
            backend_integration:
              - 'services/**'
              - 'context/**'
              - 'utils/api*'
              - 'lib/api*'
            security:
              - '**/*.env*'
              - '**/auth/**'
              - '**/security/**'
              - 'firebase.json'
              - 'firestore.rules'
            testing:
              - '**/*.test.*'
              - '**/*.spec.*'
              - 'jest.config.*'
              - 'vitest.config.*'
              
      - name: Analyze changed files
        id: analyze
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | jq -R . | jq -s . -c)
          else
            FILES=$(git diff --name-only HEAD~1 HEAD | jq -R . | jq -s . -c)
          fi
          echo "files=$FILES" >> $GITHUB_OUTPUT

  frontend-engineer-tasks:
    needs: detect-changes
    if: |
      needs.detect-changes.outputs.frontend_changed == 'true' ||
      github.event.inputs.target_agent == 'frontend-engineer' ||
      github.event.inputs.target_agent == 'all'
    runs-on: ubuntu-latest
    outputs:
      issue_number: ${{ steps.create-issue.outputs.issue_number }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Generate Frontend Task Report
        id: frontend_report
        run: |
          cat > frontend-task-report.md << 'EOF'
          # Frontend Engineer Task Report
          
          ## Changed Files
          ${{ needs.detect-changes.outputs.affected_files }}
          
          ## Required Actions
          1. Review UI/UX consistency
          2. Verify mobile responsiveness
          3. Check API integration points
          4. Validate state management
          5. Ensure accessibility standards
          
          ## Integration Points
          - Auth Context: Check token management
          - Wallet Context: Verify multi-wallet support
          - Transaction Flow: Validate two-stage process
          
          ## Performance Checklist
          - [ ] Bundle size analysis
          - [ ] Lighthouse score > 90
          - [ ] First Contentful Paint < 1.5s
          - [ ] Time to Interactive < 3s
          EOF
          
      - name: Create Frontend Task Issue
        id: create-issue
        uses: actions/github-script@v7
        with:
          script: |
            const files = JSON.parse('${{ needs.detect-changes.outputs.affected_files }}' || '[]');
            const taskBody = `
            ## 🎨 Frontend Engineer Task
            
            **Triggered by**: ${context.eventName}
            **Branch**: ${context.ref}
            **Commit**: ${context.sha}
            
            ### Changed Components
            ${files.filter(f => f.includes('components/')).map(f => `- ${f}`).join('\n')}
            
            ### Changed Pages
            ${files.filter(f => f.includes('app/')).map(f => `- ${f}`).join('\n')}
            
            ### Required Actions
            1. **Code Review**: Ensure TypeScript compliance and best practices
            2. **UI Testing**: Verify all components render correctly
            3. **Integration**: Check backend API connections
            4. **Performance**: Run Lighthouse audit
            5. **Accessibility**: WCAG 2.1 AA compliance check
            
            ### Backend Integration Checklist
            - [ ] Verify endpoint URLs match backend routes
            - [ ] Confirm request/response types align
            - [ ] Test error handling for all API calls
            - [ ] Validate authentication flow
            
            ### Testing Requirements
            - [ ] Unit tests for new components
            - [ ] Integration tests for API calls
            - [ ] E2E tests for critical user flows
            
            /cc @clearhold-frontend-engineer
            `;
            
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `[FRONTEND-AGENT] Review changes in ${files.length} files`,
              body: taskBody,
              labels: ['agent-task', 'frontend', 'priority-medium']
            });
            
            core.setOutput('issue_number', issue.data.number);

  backend-integration-monitor:
    needs: detect-changes
    if: needs.detect-changes.outputs.backend_integration_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Analyze Backend Integration Points
        run: |
          echo "## Backend Integration Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check for API client usage
          echo "### API Client Usage" >> $GITHUB_STEP_SUMMARY
          grep -r "apiClient\." --include="*.ts" --include="*.tsx" . | head -20 >> $GITHUB_STEP_SUMMARY || echo "No API client usage found" >> $GITHUB_STEP_SUMMARY
          
          # Check for backend endpoint references
          echo "### Backend Endpoints Referenced" >> $GITHUB_STEP_SUMMARY
          grep -r "/api/" --include="*.ts" --include="*.tsx" . | grep -E "(post|get|put|delete|patch)" | head -20 >> $GITHUB_STEP_SUMMARY || echo "No direct API calls found" >> $GITHUB_STEP_SUMMARY
          
      - name: Create Cross-Repository Issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueBody = `
            ## 🔄 Frontend-Backend Integration Alert
            
            Frontend changes detected that may affect backend integration.
            
            **Frontend Repo**: ${context.repo.repo}
            **Commit**: ${context.sha}
            **Changes**: Backend integration files modified
            
            ### Action Required
            The backend engineer should:
            1. Review API endpoint compatibility
            2. Verify request/response contracts
            3. Check authentication middleware
            4. Update API documentation if needed
            
            ### Affected Services
            ${JSON.parse('${{ needs.detect-changes.outputs.affected_files }}' || '[]')
              .filter(f => f.includes('services/') || f.includes('context/'))
              .map(f => `- ${f}`)
              .join('\n')}
            
            /cc @cryptoescrow-backend-engineer
            `;
            
            // Create issue in current repo (as we might not have access to backend repo)
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '[BACKEND-AGENT] Frontend integration changes require review',
              body: issueBody,
              labels: ['agent-task', 'backend', 'integration']
            });

  testing-expert-trigger:
    needs: [detect-changes, frontend-engineer-tasks]
    if: |
      always() && 
      (needs.detect-changes.outputs.testing_required == 'true' ||
       github.event.inputs.target_agent == 'testing-expert' ||
       github.event.inputs.target_agent == 'all')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Test Environment
        run: |
          echo "## 🧪 Test Suite Configuration" >> test-config.md
          echo "" >> test-config.md
          echo "### Test Targets" >> test-config.md
          echo "- Frontend Changes: ${{ needs.detect-changes.outputs.frontend_changed }}" >> test-config.md
          echo "- Backend Integration: ${{ needs.detect-changes.outputs.backend_integration_changed }}" >> test-config.md
          echo "- Security Sensitive: ${{ needs.detect-changes.outputs.security_sensitive }}" >> test-config.md
          
      - name: Create Testing Task
        uses: actions/github-script@v7
        with:
          script: |
            const testPlan = `
            ## 🧪 Testing Expert Task
            
            **Test Execution Plan**
            
            ### 1. Unit Tests
            \`\`\`bash
            npm test -- --coverage
            \`\`\`
            
            ### 2. Integration Tests
            \`\`\`bash
            npm run firebase:emulators
            npm run test:integration:backend
            npm run test:integration:firebase
            \`\`\`
            
            ### 3. E2E Tests (if UI changes)
            \`\`\`bash
            npm run cypress:run
            npm run playwright:test
            \`\`\`
            
            ### 4. Performance Tests
            - Lighthouse CI
            - Bundle size analysis
            - API response time benchmarks
            
            ### 5. Security Tests
            - Dependency vulnerability scan
            - OWASP ZAP scan
            - Authentication flow testing
            
            ### Test Coverage Requirements
            - Overall: ≥ 80%
            - Critical paths: 100%
            - New code: ≥ 90%
            
            ### Regression Testing
            Focus on:
            ${JSON.parse('${{ needs.detect-changes.outputs.affected_files }}' || '[]')
              .map(f => `- ${f}`)
              .join('\n')}
            
            /cc @clearhold-testing-expert
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '[TEST-AGENT] Comprehensive test suite execution required',
              body: testPlan,
              labels: ['agent-task', 'testing', 'priority-high']
            });

  security-auditor-scan:
    needs: detect-changes
    if: |
      needs.detect-changes.outputs.security_sensitive == 'true' ||
      github.event.inputs.target_agent == 'security-auditor' ||
      github.event.inputs.agent_task == 'Security audit'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Security Checks
        run: |
          echo "## 🔒 Security Scan Results" >> security-report.md
          echo "" >> security-report.md
          
          # Check for exposed secrets
          echo "### Secret Detection" >> security-report.md
          if grep -r "FIREBASE\|API_KEY\|SECRET\|PASSWORD" --include="*.ts" --include="*.tsx" --include="*.js" . | grep -v "process.env"; then
            echo "⚠️ Potential secrets detected!" >> security-report.md
          else
            echo "✅ No hardcoded secrets found" >> security-report.md
          fi
          
          # Check for security headers
          echo "### Security Headers Check" >> security-report.md
          if grep -r "Content-Security-Policy\|X-Frame-Options" .; then
            echo "✅ Security headers configured" >> security-report.md
          else
            echo "⚠️ Security headers may need configuration" >> security-report.md
          fi
          
      - name: Create Security Alert
        if: needs.detect-changes.outputs.security_sensitive == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const securityReport = `
            ## 🔒 Security Audit Required
            
            **Severity**: HIGH
            **Triggered by**: Security-sensitive file changes
            
            ### Affected Areas
            ${JSON.parse('${{ needs.detect-changes.outputs.affected_files }}' || '[]')
              .filter(f => f.includes('auth') || f.includes('security') || f.includes('.env'))
              .map(f => `- ${f}`)
              .join('\n')}
            
            ### Security Checklist
            - [ ] Authentication flow review
            - [ ] Authorization checks
            - [ ] Input validation
            - [ ] XSS prevention
            - [ ] CSRF protection
            - [ ] SQL injection prevention
            - [ ] Rate limiting
            - [ ] Secrets management
            - [ ] HTTPS enforcement
            - [ ] CORS configuration
            
            ### Required Actions
            1. Review all authentication endpoints
            2. Verify Firebase security rules
            3. Check for exposed API keys
            4. Validate input sanitization
            5. Test authorization boundaries
            
            ### Smart Contract Security (if applicable)
            - [ ] Reentrancy protection
            - [ ] Integer overflow checks
            - [ ] Access control validation
            - [ ] Gas optimization review
            
            /cc @clearhold-security-auditor
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '[SECURITY-AGENT] Urgent: Security audit required',
              body: securityReport,
              labels: ['agent-task', 'security', 'priority-critical']
            });

  agent-coordination-summary:
    needs: [
      detect-changes,
      frontend-engineer-tasks,
      backend-integration-monitor,
      testing-expert-trigger,
      security-auditor-scan
    ]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Generate Coordination Report
        env:
          FRONTEND_RESULT: ${{ needs.frontend-engineer-tasks.result }}
          FRONTEND_ISSUE: ${{ needs.frontend-engineer-tasks.outputs.issue_number || 'N/A' }}
          BACKEND_RESULT: ${{ needs.backend-integration-monitor.result }}
          TESTING_RESULT: ${{ needs.testing-expert-trigger.result }}
          SECURITY_RESULT: ${{ needs.security-auditor-scan.result }}
          FRONTEND_CHANGED: ${{ needs.detect-changes.outputs.frontend_changed }}
          BACKEND_CHANGED: ${{ needs.detect-changes.outputs.backend_integration_changed }}
          SECURITY_SENSITIVE: ${{ needs.detect-changes.outputs.security_sensitive }}
          TESTING_REQUIRED: ${{ needs.detect-changes.outputs.testing_required }}
        run: |
          cat > coordination-report.md << 'EOF'
          # 🤖 Agent Coordination Summary
          
          ## Workflow Execution Status
          
          | Agent | Status | Tasks Created |
          |-------|--------|---------------|
          | Frontend Engineer | $FRONTEND_RESULT | Issue #$FRONTEND_ISSUE |
          | Backend Engineer | $BACKEND_RESULT | Cross-repo sync initiated |
          | Testing Expert | $TESTING_RESULT | Test suite configured |
          | Security Auditor | $SECURITY_RESULT | Security scan completed |
          
          ## Change Impact Analysis
          - Frontend Components: $FRONTEND_CHANGED
          - Backend Integration: $BACKEND_CHANGED
          - Security Sensitive: $SECURITY_SENSITIVE
          - Testing Required: $TESTING_REQUIRED
          
          ## Next Steps
          1. Agents will process assigned tasks
          2. Results will be reported via PR comments
          3. Cross-repository sync via issue tracking
          4. Final validation before merge
          
          ## Inter-Agent Communication
          - Frontend → Backend: API contract validation
          - Frontend → Testing: UI test generation
          - Backend → Security: API security review
          - Testing → All: Coverage reports
          
          EOF
          
          cat coordination-report.md >> $GITHUB_STEP_SUMMARY
          
      - name: Post Summary to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const summary = `
            ## 🤖 Agent Coordination Summary
            
            **All agents have been notified of changes.**
            
            | Agent | Assignment |
            |-------|------------|
            | 🎨 Frontend | ${needs.detect-changes.outputs.frontend_changed == 'true' ? 'Active' : 'Standby'} |
            | 🔧 Backend | ${needs.detect-changes.outputs.backend_integration_changed == 'true' ? 'Active' : 'Standby'} |
            | 🧪 Testing | Active |
            | 🔒 Security | ${needs.detect-changes.outputs.security_sensitive == 'true' ? 'URGENT' : 'Monitoring'} |
            
            Agents will report their findings as PR comments.
            `;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: summary
            });