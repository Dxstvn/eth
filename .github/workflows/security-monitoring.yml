name: Security Monitoring

on:
  # Run on PRs and pushes for immediate feedback
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  # Weekly security scan
  schedule:
    - cron: '0 9 * * 1' # Every Monday at 9 AM UTC
  # Manual trigger for urgent scans
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  issues: write

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run npm audit
        id: npm-audit
        run: |
          npm audit --json > audit-report.json || true
          CRITICAL=$(cat audit-report.json | jq '.metadata.vulnerabilities.critical // 0')
          HIGH=$(cat audit-report.json | jq '.metadata.vulnerabilities.high // 0')
          MODERATE=$(cat audit-report.json | jq '.metadata.vulnerabilities.moderate // 0')
          LOW=$(cat audit-report.json | jq '.metadata.vulnerabilities.low // 0')
          
          echo "critical=$CRITICAL" >> $GITHUB_OUTPUT
          echo "high=$HIGH" >> $GITHUB_OUTPUT
          echo "moderate=$MODERATE" >> $GITHUB_OUTPUT
          echo "low=$LOW" >> $GITHUB_OUTPUT
          
          # Create summary
          echo "## 🔒 Dependency Security Scan" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Critical | $CRITICAL |" >> $GITHUB_STEP_SUMMARY
          echo "| High | $HIGH |" >> $GITHUB_STEP_SUMMARY
          echo "| Moderate | $MODERATE |" >> $GITHUB_STEP_SUMMARY
          echo "| Low | $LOW |" >> $GITHUB_STEP_SUMMARY
      
      - name: Upload audit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: npm-audit-report
          path: audit-report.json
      
      - name: Create issue for critical vulnerabilities
        if: steps.npm-audit.outputs.critical > 0 && github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const critical = ${{ steps.npm-audit.outputs.critical }};
            const high = ${{ steps.npm-audit.outputs.high }};
            
            const issueBody = `## 🚨 Critical Security Vulnerabilities Detected
            
            The weekly security scan has found vulnerabilities that require immediate attention:
            
            - **Critical**: ${critical} vulnerabilities
            - **High**: ${high} vulnerabilities
            
            ### Immediate Actions Required:
            1. Run \`npm audit\` locally to see details
            2. Run \`npm audit fix\` to auto-fix where possible
            3. Manually update packages that can't be auto-fixed
            4. Test thoroughly after updates
            
            ### Commands:
            \`\`\`bash
            npm audit
            npm audit fix
            npm audit fix --force  # Use with caution
            \`\`\`
            
            **Priority**: This should be addressed immediately as critical vulnerabilities may expose the application to security risks.
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `[SECURITY] ${critical} critical vulnerabilities detected`,
              body: issueBody,
              labels: ['security', 'critical', 'dependencies']
            });

  # Code security scanning with CodeQL
  code-analysis:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, typescript
      
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Secret scanning
  secret-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Secret Scan Summary
        if: always()
        run: |
          echo "## 🔑 Secret Scanning" >> $GITHUB_STEP_SUMMARY
          echo "Completed secret scanning with Gitleaks" >> $GITHUB_STEP_SUMMARY
          echo "- Scanned for API keys, tokens, and credentials" >> $GITHUB_STEP_SUMMARY
          echo "- Results available in Security tab" >> $GITHUB_STEP_SUMMARY

  # SAST for common vulnerabilities
  security-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Security Best Practices Check
        run: |
          echo "## 🛡️ Security Checks" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check for hardcoded secrets patterns
          echo "### Checking for potential secrets..." >> $GITHUB_STEP_SUMMARY
          if grep -r "PRIVATE_KEY\|SECRET_KEY\|API_KEY\|PASSWORD" --include="*.js" --include="*.ts" --include="*.tsx" --exclude-dir=node_modules . | grep -v "process.env"; then
            echo "⚠️ Found potential hardcoded secrets" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No hardcoded secrets found" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check for console.log in production code
          echo "### Checking for console.log statements..." >> $GITHUB_STEP_SUMMARY
          CONSOLE_COUNT=$(grep -r "console.log" --include="*.js" --include="*.ts" --include="*.tsx" --exclude-dir=node_modules --exclude-dir=__tests__ . | wc -l)
          echo "Found $CONSOLE_COUNT console.log statements" >> $GITHUB_STEP_SUMMARY
          
          # Check for TODO security items
          echo "### Checking for security TODOs..." >> $GITHUB_STEP_SUMMARY
          if grep -r "TODO.*security\|FIXME.*security\|TODO.*auth\|FIXME.*auth" --include="*.js" --include="*.ts" --include="*.tsx" --exclude-dir=node_modules .; then
            echo "⚠️ Found security-related TODOs" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No security TODOs found" >> $GITHUB_STEP_SUMMARY
          fi

  # License compliance check
  license-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Check licenses
        run: |
          npx license-checker --production --summary --out license-summary.txt || true
          echo "## 📜 License Compliance" >> $GITHUB_STEP_SUMMARY
          echo "License summary generated" >> $GITHUB_STEP_SUMMARY
          if [ -f license-summary.txt ]; then
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            head -20 license-summary.txt >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi

  # Security report summary
  security-summary:
    needs: [dependency-scan, code-analysis, secret-scan, security-checks, license-check]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Generate Security Report
        run: |
          echo "# 🔒 Security Monitoring Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Scan | ${{ needs.dependency-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Analysis | ${{ needs.code-analysis.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secret Scan | ${{ needs.secret-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Checks | ${{ needs.security-checks.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| License Check | ${{ needs.license-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall status
          if [[ "${{ needs.dependency-scan.result }}" == "failure" ]] || \
             [[ "${{ needs.secret-scan.result }}" == "failure" ]]; then
            echo "## ❌ Security Issues Detected" >> $GITHUB_STEP_SUMMARY
            echo "Please review the individual job results above." >> $GITHUB_STEP_SUMMARY
          else
            echo "## ✅ Security Checks Passed" >> $GITHUB_STEP_SUMMARY
            echo "No critical security issues detected." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Review any warnings in the individual scans" >> $GITHUB_STEP_SUMMARY
          echo "2. Keep dependencies up to date" >> $GITHUB_STEP_SUMMARY
          echo "3. Follow security best practices" >> $GITHUB_STEP_SUMMARY
          echo "4. Regular security training for the team" >> $GITHUB_STEP_SUMMARY