name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
      - 'LICENSE'
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
      - 'LICENSE'

permissions:
  contents: read
  pull-requests: write

env:
  NODE_VERSION: '20'

jobs:
  # Detect what changed to run relevant jobs
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      backend: ${{ steps.changes.outputs.backend }}
      workflows: ${{ steps.changes.outputs.workflows }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            frontend:
              - 'app/**'
              - 'components/**'
              - 'public/**'
              - 'package*.json'
              - 'tsconfig.json'
              - 'next.config.js'
              - 'tailwind.config.ts'
            backend:
              - 'backend/**'
              - 'api/**'
            workflows:
              - '.github/workflows/**'

  # Frontend linting and type checking
  frontend-quality:
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend == 'true' || needs.detect-changes.outputs.workflows == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint
        continue-on-error: true
      
      - name: TypeScript type check
        run: npm run type-check || true
      
      - name: Check code formatting
        run: npm run format:check || true
      
      - name: Add PR Comment
        if: github.event_name == 'pull_request' && failure()
        uses: actions/github-script@v7
        with:
          script: |
            const output = `### ⚠️ Code Quality Issues Found
            
            Please run the following commands locally:
            \`\`\`bash
            npm run lint
            npm run type-check
            npm run format
            \`\`\`
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

  # Frontend tests
  frontend-test:
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend == 'true' || needs.detect-changes.outputs.workflows == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run unit tests
        run: npm test -- --coverage --watchAll=false
      
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage/
      
      - name: Test Summary
        if: always()
        run: |
          echo "## 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f coverage/coverage-summary.json ]; then
            echo "### Coverage Summary" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            cat coverage/coverage-summary.json | jq -r '.total | to_entries | .[] | "\(.key): \(.value.pct)%"' >> $GITHUB_STEP_SUMMARY || echo "Coverage data not available" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi

  # Build frontend
  frontend-build:
    needs: [frontend-quality, frontend-test]
    if: needs.detect-changes.outputs.frontend == 'true' || needs.detect-changes.outputs.workflows == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
        env:
          NEXT_TELEMETRY_DISABLED: 1
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: .next/
      
      - name: Build Summary
        run: |
          echo "## 🏗️ Build Completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Node Version: ${{ env.NODE_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build Time: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- Build Size: $(du -sh .next | cut -f1)" >> $GITHUB_STEP_SUMMARY

  # Backend tests (if backend exists)
  backend-test:
    needs: detect-changes
    if: needs.detect-changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Backend Test Placeholder
        run: |
          echo "## 🔧 Backend Tests" >> $GITHUB_STEP_SUMMARY
          echo "Backend test configuration will be added when backend is integrated" >> $GITHUB_STEP_SUMMARY

  # Deploy to staging (develop branch)
  deploy-staging:
    needs: [frontend-build]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to Staging
        run: |
          echo "## 🚀 Deploying to Staging" >> $GITHUB_STEP_SUMMARY
          echo "Deployment will be configured based on your hosting platform" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: develop" >> $GITHUB_STEP_SUMMARY
          echo "- Environment: staging" >> $GITHUB_STEP_SUMMARY
          echo "- Time: $(date)" >> $GITHUB_STEP_SUMMARY

  # Deploy to production (main branch)
  deploy-production:
    needs: [frontend-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to Production
        run: |
          echo "## 🚀 Deploying to Production" >> $GITHUB_STEP_SUMMARY
          echo "Deployment will be configured based on your hosting platform" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: main" >> $GITHUB_STEP_SUMMARY
          echo "- Environment: production" >> $GITHUB_STEP_SUMMARY
          echo "- Time: $(date)" >> $GITHUB_STEP_SUMMARY

  # Final status check
  ci-status:
    needs: [frontend-quality, frontend-test, frontend-build]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: CI Summary
        run: |
          echo "# 📊 CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Job Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.frontend-quality.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.frontend-test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.frontend-build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.frontend-quality.result }}" == "failure" ]] || \
             [[ "${{ needs.frontend-test.result }}" == "failure" ]] || \
             [[ "${{ needs.frontend-build.result }}" == "failure" ]]; then
            echo "❌ **Pipeline Failed** - Please check the failed jobs above" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ **All checks passed!**" >> $GITHUB_STEP_SUMMARY
          fi