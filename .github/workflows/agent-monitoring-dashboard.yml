name: Agent Activity Monitoring Dashboard

on:
  schedule:
    - cron: '0 */4 * * *'  # Every 4 hours
  workflow_dispatch:
  issues:
    types: [opened, closed, labeled]
  pull_request:
    types: [opened, closed]

jobs:
  collect-agent-metrics:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Collect Agent Activity Metrics
        id: collect-metrics
        uses: actions/github-script@v7
        with:
          script: |
            // Get issues created by agents in the last 7 days
            const sevenDaysAgo = new Date();
            sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
            
            const agentLabels = ['agent-task', 'frontend', 'backend', 'testing', 'security'];
            const agentIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: agentLabels.join(','),
              since: sevenDaysAgo.toISOString(),
              state: 'all',
              per_page: 100
            });
            
            // Categorize by agent type
            const metrics = {
              frontend: 0,
              backend: 0,
              testing: 0,
              security: 0,
              total: agentIssues.data.length,
              open: 0,
              closed: 0,
              avgResolutionTime: 0
            };
            
            let totalResolutionTime = 0;
            let resolvedCount = 0;
            
            agentIssues.data.forEach(issue => {
              // Count by label
              if (issue.labels.some(l => l.name === 'frontend')) metrics.frontend++;
              if (issue.labels.some(l => l.name === 'backend')) metrics.backend++;
              if (issue.labels.some(l => l.name === 'testing')) metrics.testing++;
              if (issue.labels.some(l => l.name === 'security')) metrics.security++;
              
              // Count by state
              if (issue.state === 'open') metrics.open++;
              if (issue.state === 'closed') {
                metrics.closed++;
                // Calculate resolution time
                const created = new Date(issue.created_at);
                const closed = new Date(issue.closed_at);
                const resolutionTime = (closed - created) / (1000 * 60 * 60); // hours
                totalResolutionTime += resolutionTime;
                resolvedCount++;
              }
            });
            
            if (resolvedCount > 0) {
              metrics.avgResolutionTime = (totalResolutionTime / resolvedCount).toFixed(2);
            }
            
            // Store metrics
            core.setOutput('metrics', JSON.stringify(metrics));
            
            // Get recent commits by agents
            const recentCommits = await github.rest.repos.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              since: sevenDaysAgo.toISOString(),
              per_page: 100
            });
            
            const agentCommits = recentCommits.data.filter(commit => 
              commit.commit.message.includes('[FRONTEND]') ||
              commit.commit.message.includes('[BACKEND]') ||
              commit.commit.message.includes('[TEST]') ||
              commit.commit.message.includes('[SECURITY]')
            );
            
            core.setOutput('agent_commits', agentCommits.length);
            
      - name: Generate Activity Report
        run: |
          METRICS='${{ steps.collect-metrics.outputs.metrics }}'
          COMMITS='${{ steps.collect-metrics.outputs.agent_commits }}'
          
          cat > agent-dashboard.md << EOF
          # 🤖 Agent Activity Dashboard
          
          **Report Generated**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Reporting Period**: Last 7 days
          
          ## 📊 Agent Task Metrics
          
          $(echo $METRICS | jq -r '
          "| Metric | Value |
          |--------|--------|
          | Total Tasks | \(.total) |
          | Open Tasks | \(.open) |
          | Closed Tasks | \(.closed) |
          | Avg Resolution Time | \(.avgResolutionTime) hours |"')
          
          ## 🎯 Tasks by Agent Type
          
          $(echo $METRICS | jq -r '
          "| Agent | Task Count |
          |-------|------------|
          | 🎨 Frontend Engineer | \(.frontend) |
          | 🔧 Backend Engineer | \(.backend) |
          | 🧪 Testing Expert | \(.testing) |
          | 🔒 Security Auditor | \(.security) |"')
          
          ## 💻 Agent Commits
          
          Total commits by agents: **${COMMITS}**
          
          ## 📈 Activity Trends
          
          \`\`\`
          Task Distribution:
          Frontend: $(echo $METRICS | jq -r '.frontend')
          Backend:  $(echo $METRICS | jq -r '.backend')
          Testing:  $(echo $METRICS | jq -r '.testing')
          Security: $(echo $METRICS | jq -r '.security')
          \`\`\`
          
          ## 🎯 Agent Effectiveness
          
          - **Task Completion Rate**: $(echo $METRICS | jq -r '(.closed / .total * 100) | floor')%
          - **Average Resolution Time**: $(echo $METRICS | jq -r '.avgResolutionTime') hours
          - **Active Tasks**: $(echo $METRICS | jq -r '.open')
          
          ## 🔄 Cross-Repository Activity
          
          Check the backend repository for additional agent activity.
          
          ## 📝 Recent Agent Actions
          
          View detailed agent activity in the [Issues](../../issues?q=label%3Aagent-task) section.
          EOF
          
          cat agent-dashboard.md >> $GITHUB_STEP_SUMMARY
          
      - name: Create/Update Dashboard Issue
        uses: actions/github-script@v7
        with:
          script: |
            const metrics = JSON.parse('${{ steps.collect-metrics.outputs.metrics }}');
            const commits = '${{ steps.collect-metrics.outputs.agent_commits }}';
            
            // Search for existing dashboard issue
            const dashboardIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'agent-dashboard',
              state: 'open'
            });
            
            const dashboardBody = `
            # 🤖 Agent Activity Dashboard
            
            **Last Updated**: ${new Date().toISOString()}
            
            ## 📊 Current Statistics (7-day window)
            
            ### Task Metrics
            - **Total Tasks Created**: ${metrics.total}
            - **Open Tasks**: ${metrics.open}
            - **Completed Tasks**: ${metrics.closed}
            - **Completion Rate**: ${metrics.total > 0 ? Math.floor(metrics.closed / metrics.total * 100) : 0}%
            - **Avg Resolution Time**: ${metrics.avgResolutionTime} hours
            
            ### Agent Activity
            | Agent | Tasks | Status |
            |-------|-------|--------|
            | 🎨 Frontend Engineer | ${metrics.frontend} | ${metrics.frontend > 0 ? '✅ Active' : '💤 Idle'} |
            | 🔧 Backend Engineer | ${metrics.backend} | ${metrics.backend > 0 ? '✅ Active' : '💤 Idle'} |
            | 🧪 Testing Expert | ${metrics.testing} | ${metrics.testing > 0 ? '✅ Active' : '💤 Idle'} |
            | 🔒 Security Auditor | ${metrics.security} | ${metrics.security > 0 ? '✅ Active' : '💤 Idle'} |
            
            ### Code Contributions
            - **Agent Commits**: ${commits}
            - **Automated Changes**: Tracked via commit prefixes
            
            ## 📈 Performance Indicators
            
            \`\`\`mermaid
            pie title Task Distribution
                "Frontend" : ${metrics.frontend}
                "Backend" : ${metrics.backend}
                "Testing" : ${metrics.testing}
                "Security" : ${metrics.security}
            \`\`\`
            
            ## 🎯 Agent Health Status
            
            ${metrics.avgResolutionTime < 24 ? '✅' : '⚠️'} **Response Time**: ${metrics.avgResolutionTime < 24 ? 'Excellent' : 'Needs Improvement'}
            ${metrics.open < 10 ? '✅' : '⚠️'} **Task Backlog**: ${metrics.open} open tasks
            ${commits > 0 ? '✅' : '⚠️'} **Code Activity**: ${commits > 0 ? 'Active development' : 'No recent commits'}
            
            ## 🔗 Quick Links
            - [All Agent Tasks](../../issues?q=label%3Aagent-task)
            - [Frontend Tasks](../../issues?q=label%3Aagent-task+label%3Afrontend)
            - [Backend Tasks](../../issues?q=label%3Aagent-task+label%3Abackend)
            - [Security Alerts](../../issues?q=label%3Aagent-task+label%3Asecurity)
            - [Test Reports](../../issues?q=label%3Aagent-task+label%3Atesting)
            
            ---
            *This dashboard updates automatically every 4 hours*
            `;
            
            if (dashboardIssues.data.length > 0) {
              // Update existing dashboard
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: dashboardIssues.data[0].number,
                body: dashboardBody
              });
            } else {
              // Create new dashboard
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '📊 Agent Activity Dashboard',
                body: dashboardBody,
                labels: ['agent-dashboard', 'pinned']
              });
            }
            
      - name: Check Agent Health
        run: |
          METRICS='${{ steps.collect-metrics.outputs.metrics }}'
          
          # Parse metrics
          OPEN_TASKS=$(echo $METRICS | jq -r '.open')
          AVG_RESOLUTION=$(echo $METRICS | jq -r '.avgResolutionTime')
          
          # Health checks
          if [ "$OPEN_TASKS" -gt 20 ]; then
            echo "⚠️ WARNING: High number of open tasks ($OPEN_TASKS)" >> $GITHUB_STEP_SUMMARY
            echo "Consider reviewing task priorities and agent capacity" >> $GITHUB_STEP_SUMMARY
          fi
          
          if (( $(echo "$AVG_RESOLUTION > 48" | bc -l) )); then
            echo "⚠️ WARNING: Slow average resolution time (${AVG_RESOLUTION} hours)" >> $GITHUB_STEP_SUMMARY
            echo "Consider optimizing agent workflows" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Performance report
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🏥 Agent Health Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "$OPEN_TASKS" -lt 10 ] && (( $(echo "$AVG_RESOLUTION < 24" | bc -l) )); then
            echo "✅ **Overall Health**: Excellent" >> $GITHUB_STEP_SUMMARY
            echo "- Task backlog is manageable" >> $GITHUB_STEP_SUMMARY
            echo "- Resolution time is within target" >> $GITHUB_STEP_SUMMARY
            echo "- Agents are performing efficiently" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Overall Health**: Needs Attention" >> $GITHUB_STEP_SUMMARY
            echo "- Review task distribution" >> $GITHUB_STEP_SUMMARY
            echo "- Consider workflow optimizations" >> $GITHUB_STEP_SUMMARY
            echo "- Monitor agent performance closely" >> $GITHUB_STEP_SUMMARY
          fi